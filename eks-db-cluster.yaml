AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  CloudFormation template to deploy an EKS cluster with EC2 nodes
  and an RDS SQL Server Multi-AZ database instance.

Parameters:
  VpcCIDR:
    Description: CIDR block for the VPC.
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Description: CIDR block for Public Subnet 1 in AZ1.
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Description: CIDR block for Public Subnet 2 in AZ2.
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1CIDR:
    Description: CIDR block for Private Subnet 1 (EKS Nodes, DB) in AZ1.
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet2CIDR:
    Description: CIDR block for Private Subnet 2 (EKS Nodes, DB) in AZ2.
    Type: String
    Default: 10.0.4.0/24

  EKSClusterName:
    Description: Name for the EKS cluster.
    Type: String
    Default: my-eks-cluster
  EKSNodeInstanceType:
    Description: EC2 instance type for EKS worker nodes.
    Type: String
    Default: t3.medium
  EKSNodeGroupDesiredSize:
    Description: Desired number of worker nodes.
    Type: Number
    Default: 2
  EKSNodeGroupMinSize:
    Description: Minimum number of worker nodes.
    Type: Number
    Default: 1
  EKSNodeGroupMaxSize:
    Description: Maximum number of worker nodes.
    Type: Number
    Default: 3 # Puedes ajustar esto según tus necesidades de escalado
  KubernetesVersion:
    Description: Kubernetes version for EKS cluster. Verify supported versions in your region.
    Type: String
    Default: "1.31" # Ejemplo, verifica la última versión soportada por EKS

  DBInstanceIdentifier:
    Description: Identifier for the RDS DB instance.
    Type: String
    Default: my-sqlserver-db
  DBEngine:
    Description: Database engine. For SQL Server, use 'sqlserver-se', 'sqlserver-ee', 'sqlserver-ex', 'sqlserver-web'.
    Type: String
    Default: sqlserver-ex # SQL Server Standard Edition
  DBEngineVersion:
    Description: SQL Server engine version. Verify supported versions for your chosen engine and region.
    Type: String
    Default: "15.00.4153.1.v1" # Ejemplo para SQL Server 2019 SE, verifica la actual
  DBInstanceClass:
    Description: Instance class for the RDS DB instance.
    Type: String
    Default: db.t3.micro # Ajusta según tus necesidades
  DBAllocatedStorage:
    Description: Allocated storage for the DB instance (in GB).
    Type: Number
    Default: 20 # Mínimo para algunas versiones de SQL Server puede ser 20GB o más.
  DBMasterUsername:
    Description: Master username for the DB instance.
    Type: String
    NoEcho: true
    Default: admin
  DBMasterUserPassword:
    Description: Master password for the DB instance. Must meet complexity requirements.
    Type: String
    NoEcho: true
    MinLength: 8 # SQL Server y RDS tienen requisitos de complejidad.
    Default: PasswordSecure123!
  DBLicenseModel:
    Description: License model for SQL Server.
    Type: String
    Default: license-included
    AllowedValues:
      - license-included
      - bring-your-own-license

Resources:
  # ------------------------------------------------------------------------------------
  # Network Infrastructure
  # ------------------------------------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-IGW"
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-PublicSubnet1"
        - Key: kubernetes.io/role/elb # Para descubrimiento de LBs públicos por Kubernetes
          Value: "1"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-PublicSubnet2"
        - Key: kubernetes.io/role/elb
          Value: "1"

  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-NatGateway1"
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-NatGateway2"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-PrivateSubnet1"
        - Key: kubernetes.io/role/internal-elb # Para descubrimiento de LBs internos
          Value: "1"
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-PrivateSubnet2"
        - Key: kubernetes.io/role/internal-elb
          Value: "1"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-PublicRouteTable"
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-PrivateRouteTable1"
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-PrivateRouteTable2"
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # ------------------------------------------------------------------------------------
  # IAM Roles for EKS
  # ------------------------------------------------------------------------------------
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EKSClusterName}-ClusterRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EKSClusterName}-NodeRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly # Para ECR
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy # Para el CNI de VPC
        # Considera añadir AmazonSSMManagedInstanceCore si necesitas acceso SSM a los nodos

  # ------------------------------------------------------------------------------------
  # Security Groups
  # ------------------------------------------------------------------------------------
  EKSControlPlaneSecurityGroup: # SG para el plano de control de EKS
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${EKSClusterName}-ControlPlaneSG"
      GroupDescription: Security group for EKS control plane communication with worker nodes.
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-ControlPlaneSG"
      # EKS gestiona las reglas necesarias hacia los nodos.
      # Los nodos necesitan poder hablar con el plano de control en el puerto 443.

  EKSNodeSecurityGroup: # SG para los nodos trabajadores de EKS
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${EKSClusterName}-NodeSG"
      GroupDescription: Security group for EKS worker nodes.
      VpcId: !Ref VPC
      SecurityGroupIngress: # Reglas de entrada para los nodos
        - IpProtocol: tcp # Desde el plano de control EKS
          FromPort: 443 # HTTPS
          ToPort: 443
          SourceSecurityGroupId: !Ref EKSControlPlaneSecurityGroup
        - IpProtocol: tcp # Desde el plano de control EKS (para kubelet, métricas, etc.)
          FromPort: 10250
          ToPort: 10250
          SourceSecurityGroupId: !Ref EKSControlPlaneSecurityGroup
        # Puedes añadir más reglas aquí si tus pods necesitan exponer puertos específicos
        # o si necesitas acceso SSH (no recomendado para producción sin bastión)
      SecurityGroupEgress: # Permitir todo el tráfico saliente por defecto
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${EKSClusterName}-NodeSG"

  RDSSecurityGroup: # SG para la instancia RDS SQL Server
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${DBInstanceIdentifier}-DBSG"
      GroupDescription: Security group for RDS SQL Server DB instance.
      VpcId: !Ref VPC
      # La regla de entrada desde EKSNodeSecurityGroup se define por separado
      Tags:
        - Key: Name
          Value: !Sub "${DBInstanceIdentifier}-DBSG"

  RDSIngressFromEKSNodes: # Regla de entrada para RDS desde los nodos EKS
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup # SG al que se aplica la regla
      IpProtocol: tcp
      FromPort: 1433 # Puerto estándar de SQL Server
      ToPort: 1433
      SourceSecurityGroupId: !Ref EKSNodeSecurityGroup # SG origen del tráfico (nodos EKS)
    DependsOn: # Asegura que ambos SGs existan antes de crear la regla
      - RDSSecurityGroup
      - EKSNodeSecurityGroup
      - EKSNodeGroup # Asegura que el grupo de nodos (y su SG asociado) esté en proceso o creado

  # ------------------------------------------------------------------------------------
  # EKS Cluster
  # ------------------------------------------------------------------------------------
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EKSClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSControlPlaneSecurityGroup
        SubnetIds: # EKS requiere subredes en al menos dos AZs
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        # EndpointPublicAccess: true # Opcional, por defecto es true
        # EndpointPrivateAccess: false # Opcional, por defecto es false
      Tags:
        - Key: Name
          Value: !Ref EKSClusterName
    DependsOn:
      - EKSClusterRole
      # CloudFormation debería inferir dependencias de subredes y SG del plano de control

  # ------------------------------------------------------------------------------------
  # EKS Node Group
  # ------------------------------------------------------------------------------------
  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Sub "${EKSClusterName}-NodeGroup"
      NodeRole: !GetAtt EKSNodeRole.Arn
      Subnets: # Nodos en subredes privadas
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      InstanceTypes:
        - !Ref EKSNodeInstanceType
      ScalingConfig:
        MinSize: !Ref EKSNodeGroupMinSize
        DesiredSize: !Ref EKSNodeGroupDesiredSize
        MaxSize: !Ref EKSNodeGroupMaxSize
      AmiType: AL2_x86_64 # Amazon Linux 2 para EKS
      DiskSize: 20 # Tamaño del disco en GiB para los nodos
      CapacityType: SPOT
      # RemoteAccess: # Opcional para acceso SSH, requiere un KeyPair
      #   Ec2SshKey: "your-ec2-keypair-name"
      #   SourceSecurityGroups: [ "sg-xxxxxxxxxxxxxxxxx" ] # SG desde donde permitir SSH
      Tags:
        Name: !Sub "${EKSClusterName}-WorkerNode"
    DependsOn:
      - EKSCluster
      - EKSNodeRole


  # ------------------------------------------------------------------------------------
  # RDS SQL Server Multi-AZ Instance
  # ------------------------------------------------------------------------------------
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Subnet Group for RDS SQL Server instance.
      SubnetIds: # Instancia RDS en subredes privadas
        #- !Ref PrivateSubnet1
        #- !Ref PrivateSubnet2
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${DBInstanceIdentifier}-SubnetGroup"

  RDSInstanceSQLServer:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBEngineVersion
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      StorageType: gp2 # General Purpose SSD
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterUserPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      MultiAZ: false # Habilita la configuración Multi-AZ
      LicenseModel: !Ref DBLicenseModel
      #PreferredBackupWindow: "02:00-03:00" # Hora UTC
      #PreferredMaintenanceWindow: "sun:03:00-sun:04:00" # Hora UTC
      #BackupRetentionPeriod: 7 # Días
      #StorageEncrypted: true # Recomendado
      #CopyTagsToSnapshot: true
      Tags:
        - Key: Name
          Value: !Ref DBInstanceIdentifier
    DependsOn:
      - DBSubnetGroup
      - RDSSecurityGroup
      - RDSIngressFromEKSNodes # Asegura que la regla de SG esté lista

Outputs:
  VPCId:
    Description: ID of the created VPC.
    Value: !Ref VPC
  EKSClusterNameOutput:
    Description: Name of the EKS Cluster.
    Value: !Ref EKSCluster
  EKSClusterArn:
    Description: ARN of the EKS Cluster.
    Value: !GetAtt EKSCluster.Arn
  EKSNodeRoleArn:
    Description: ARN of the IAM Role for EKS Nodes.
    Value: !GetAtt EKSNodeRole.Arn
  EKSNodeSecurityGroupId:
    Description: Security Group ID for EKS Nodes.
    Value: !Ref EKSNodeSecurityGroup
  RDSSecurityGroupId:
    Description: Security Group ID for the RDS DB Instance.
    Value: !Ref RDSSecurityGroup
  RDSInstanceEndpointAddress:
    Description: Endpoint address for the RDS DB Instance.
    Value: !GetAtt RDSInstanceSQLServer.Endpoint.Address
  RDSInstanceEndpointPort:
    Description: Endpoint port for the RDS DB Instance.
    Value: !GetAtt RDSInstanceSQLServer.Endpoint.Port
  RDSInstanceName:
    Description: Name of the RDS DB Instance.
    Value: !Ref RDSInstanceSQLServer
